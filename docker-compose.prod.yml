services:
  stt:
    build: ./services/stt
    ports:
      - "8001:8001"
    env_file: .env.production
    command: uvicorn main:app --host 0.0.0.0 --port 8001
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8001/health').getcode()==200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  llm-core:
    build: ./services/llm-core
    ports:
      - "8002:8002"
    env_file: .env.production
    command: uvicorn main:app --host 0.0.0.0 --port 8002
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8002/health').getcode()==200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  tts:
    build: ./services/tts
    ports:
      - "8003:8003"
    env_file: .env.production
    command: uvicorn main:app --host 0.0.0.0 --port 8003
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8003/health').getcode()==200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 1m
    restart: unless-stopped

  orchestrator:
    build: ./services/orchestrator
    ports:
      - "8000:8000"
    depends_on:
      stt:
        condition: service_healthy
      llm-core:
        condition: service_healthy
      tts:
        condition: service_healthy
    env_file: .env.production
    environment:
      - ALLOWED_ORIGINS=https://v-kare.co.in,https://www.v-kare.co.in,http://v-kare.co.in,http://www.v-kare.co.in
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  website:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - "./website:/usr/share/nginx/html:ro"
      - "./website/nginx.conf:/etc/nginx/conf.d/default.conf:ro"
    depends_on:
      orchestrator:
        condition: service_healthy
    restart: unless-stopped

  backend:
    build: ./website/backend
    ports:
      - "9000:9000"
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:9000/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
